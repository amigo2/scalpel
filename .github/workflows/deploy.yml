name: Build & Deploy SPA + Lambda

on:
  push:
    branches:
      - master

env:
  AWS_REGION:   eu-west-2
  ECR_URI:      929423420164.dkr.ecr.eu-west-2.amazonaws.com/scalpel
  LAMBDA_NAME:  scalpel-backend
  S3_BUCKET:    scalpel-frontend-bucket

defaults:
  run:
    shell: bash

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # Build & Deploy Single-Page App
  # ────────────────────────────────────────────────────────────────────────────
  deploy_spa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install & build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Sync to S3
        run: |
          aws s3 sync frontend/dist \
            s3://${{ env.S3_BUCKET }}/ \
            --delete

    # ────────────────────────────────────────────────────────────────────────────
  # Build & Deploy Lambda Container
  # ────────────────────────────────────────────────────────────────────────────
  # deploy_lambda:
  #   needs: deploy_spa
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Configure AWS creds
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region:            ${{ env.AWS_REGION }}

  #     - name: Login to ECR (get creds)
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Set up QEMU (multi-arch)
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Cache Docker layers
  #       uses: actions/cache@v3
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-

  #     - name: Build & push image
  #       run: |
  #         IMAGE_TAG=latest
  #         # Short SHA for immutability
  #         GIT_SHA=${GITHUB_SHA::7}
  #         REGISTRY=${{ steps.login-ecr.outputs.registry }}

  #         # Build & push via the Docker driver (uses your ECR login)
  #         docker buildx build \
  #           --driver docker \
  #           --platform linux/amd64 \
  #           --cache-from=type=local,src=/tmp/.buildx-cache \
  #           --cache-to=type=local,dest=/tmp/.buildx-cache \
  #           --push \
  #           -t "${REGISTRY}:${IMAGE_TAG}" \
  #           -t "${REGISTRY}:${GIT_SHA}" \
  #           -f Dockerfile \
  #           .

  #     - name: Update Lambda to newest image
  #       run: |
  #         aws lambda update-function-code \
  #           --function-name "${{ env.LAMBDA_NAME }}" \
  #           --image-uri "${{ steps.login-ecr.outputs.registry }}:latest"
